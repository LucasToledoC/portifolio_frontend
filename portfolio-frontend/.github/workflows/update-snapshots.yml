name: Update API snapshots (push to snapshots branch)

on:
  schedule:
    - cron: '*/30 * * * *' # every 30 minutes
  workflow_dispatch: {}

jobs:
  update-snapshots:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # avoid persisting the automatically-provided GITHUB_TOKEN credentials
          # so we can set an explicit remote URL using a personal access token (REPO_WRITE_TOKEN)
          persist-credentials: false
      - name: Fetch API snapshots
        env:
          API_BASE: ${{ secrets.API_BASE_URL }}
        run: |
          set -euo pipefail
          mkdir -p client/public/api-snapshots
          now=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # helper: try curl up to 3 times with a 30s timeout (helps if Render is waking up)
          fetch_with_retries() {
            url="$1"
            out="$2"
            tries=0
            until [ $tries -ge 3 ]
            do
              tries=$((tries+1))
              if curl --max-time 30 -fsS "$url" -o "$out"; then
                return 0
              fi
              echo "attempt $tries for $url failed, retrying in 5s..."
              sleep 5
            done
            return 1
          }

          # projects (note: backend endpoints are under /api)
          if fetch_with_retries "$API_BASE/api/projetos" /tmp/projects.json; then
            jq --arg now "$now" '. as $d | {updatedAt: $now, data: $d}' /tmp/projects.json > client/public/api-snapshots/projects.json
          else
            echo '{"updatedAt":"'$now'","data":[]}' > client/public/api-snapshots/projects.json
          fi

          # certificates
          if fetch_with_retries "$API_BASE/api/certificados" /tmp/certificates.json; then
            jq --arg now "$now" '. as $d | {updatedAt: $now, data: $d}' /tmp/certificates.json > client/public/api-snapshots/certificates.json
          else
            echo '{"updatedAt":"'$now'","data":[]}' > client/public/api-snapshots/certificates.json
          fi
      - name: Commit and push snapshots to snapshots branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add client/public/api-snapshots/*.json || true
          if git diff --quiet --cached; then
            echo "no changes to commit"
          else
            git commit -m "chore: update api snapshots"
          fi
          # push to dedicated snapshots branch to avoid triggering Vercel redeploy on main
          # try a normal push first; if it's rejected because the remote moved forward,
          # fall back to a safe force-with-lease push so runs don't fail when concurrent
          # workflow executions race to update the branch.
          if git push origin HEAD:snapshots; then
            echo "push succeeded"
          else
            echo "push rejected, attempting force-with-lease"
            git push --force-with-lease origin HEAD:snapshots
          fi
      - name: Publish snapshots to gh-pages (optional)
        env:
          REPO_WRITE_TOKEN: ${{ secrets.REPO_WRITE_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          if [ -z "${REPO_WRITE_TOKEN:-}" ]; then
            echo "REPO_WRITE_TOKEN not set - skipping gh-pages publish"
            exit 0
          fi
          mkdir -p /tmp/snapshot_publish
          cp client/public/api-snapshots/*.json /tmp/snapshot_publish/ || true
          cd /tmp/snapshot_publish
          git init
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "chore: publish snapshots to gh-pages [ci]" || true
          git push --force "https://x-access-token:${REPO_WRITE_TOKEN}@github.com/${REPO}.git" HEAD:gh-pages



